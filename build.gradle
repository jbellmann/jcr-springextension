description = 'Springextension JCR'

apply plugin: 'base'
apply plugin: 'idea'

buildscript {
	repositories {
		maven { url 'https://repo.springsource.org/plugins-snapshot' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:bundlor-plugin:0.1.2'
		classpath 'org.springframework.build.gradle:docbook-reference-plugin:0.1.5'
	}
}

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	group = 'org.springframework'

	repositories {
		mavenCentral()
		maven { url 'http://repo.springsource.org/libs-milestone' }
		maven { url 'http://repo.springsource.org/plugins-release' } // for bundlor
	}
}

configure(subprojects) { subproject ->

	apply from:   "${rootProject.projectDir}/publish-maven.gradle"
	apply plugin: 'bundlor'
	apply plugin: 'signing'

	sourceCompatibility=1.6
	targetCompatibility=1.6

	ext {
		aspectjVersion = '1.6.12'
		cglibVersion = '2.2.2'
		commonsNetVersion = '3.0.1'
		easymockVersion = '3.1'
		groovyVersion = '1.8.5'
		javaxActivationVersion = '1.1.1'
		junitVersion = '4.10'
		log4jVersion = '1.2.16'
		slf4jVersion = '1.6.4'
		mockitoVersion = '1.9.0'
		springVersion = '4.0.0.RELEASE'
		jackrabbitVersion = '2.6.2'
		jackrabbitOcmVersion = '2.0.0'
		isReleaseVersion = version.endsWith("RELEASE")
	}
	
	jar {
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version

		from("${rootProject.projectDir}/src/dist") {
			include "license.txt"
			//include "notice.txt"
			into "META-INF"
			expand(copyright: new Date().format('yyyy'), version: project.version)
		}
	}

	eclipse {
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
	}

	sourceSets {
		test {
			resources {
				srcDirs = ['src/test/resources', 'src/test/java']
			}
		}
	}

	// See http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:configurations
	// and http://www.gradle.org/docs/current/dsl/org.gradle.api.artifacts.ConfigurationContainer.html
	configurations {
		jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	// dependencies that are common across all java projects
	dependencies {
		testCompile "cglib:cglib-nodep:$cglibVersion"
		testCompile "junit:junit-dep:$junitVersion"
		testCompile "log4j:log4j:$log4jVersion"
		testCompile "org.easymock:easymock:$easymockVersion"
		testCompile "org.easymock:easymockclassextension:$easymockVersion"
		testCompile "org.hamcrest:hamcrest-all:1.1"
		testCompile "org.mockito:mockito-all:$mockitoVersion"
		testCompile "org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0"
		testCompile "org.springframework:spring-test:$springVersion"
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.6.201201232323", classifier: "runtime"
	}

	// enable all compiler warnings; individual projects may customize further
	ext.xLintArg = '-Xlint:all'
	[compileJava, compileTestJava]*.options*.compilerArgs = [xLintArg]

	test {
		// suppress all console output during testing unless running `gradle -i`
		logging.captureStandardOutput(LogLevel.INFO)
		jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${buildDir}/jacoco.exec,includes=org.springframework.integration.*"
	}

	bundlor {
		enabled = true
		failOnWarnings = true
		bundleManifestVersion = 2
		bundleVendor = 'SpringSource'
		bundleName = project.description
		bundleVersion = project.version
		importTemplate = [
			'org.apache.log4j.*;version="['+log4jVersion+'], 2.0.0)"'
		]
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
	
	signing {
		required {isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
		sign configurations.archives
	}
	
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository (url: mavenRepoUrl)
			}
		}
	}

}

project('se-jcr-commons') {
	description = 'Springextension JCR -- commons'
	dependencies {
		compile "javax.jcr:jcr:2.0"
		compile "javax.servlet:servlet-api:2.5"
		compile "org.springframework:spring-core:$springVersion"
		compile "org.springframework:spring-beans:$springVersion"
		compile "org.springframework:spring-context:$springVersion"
		compile "org.springframework:spring-context-support:$springVersion"
		compile "org.springframework:spring-aop:$springVersion"
		compile "org.springframework:spring-tx:$springVersion"
		compile "org.springframework:spring-webmvc:$springVersion"
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		compile "xerces:xercesImpl:2.10.0"
	}
	bundlor {
		bundleSymbolicName = "org.springframework.extensions.jcr.commons"
		importTemplate += [
			'javax.jcr.*;version="[2.0.0, 2.1.0)"',
			'javax.servlet.*;version="[2.5.0, 3.0.0)"',
			'org.springframework.core.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.beans.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.context.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.transaction.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.dao.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.web.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.util.*;version="[3.0.5, 4.0.0)"',
			'org.apache.xerces.*;version="[2.10.0, 3.0.0)"',
			'org.slf4j.*;version="[1.6.4, 1.7.0)"',
			'org.aopalliance.*;version="[1.0.0, 2.0.0)"',
			'org.w3c.*;version="0"',
			'org.xml.sax.*;version="0"'
		]
	}
}

project('se-jcr-jackrabbit') {
	description = 'Springextension JCR -- jackrabbit'
	dependencies {
		compile project(":se-jcr-commons")
		compile "org.apache.jackrabbit:jackrabbit-api:$jackrabbitVersion"
		compile "org.apache.jackrabbit:jackrabbit-core:$jackrabbitVersion"
		compile "org.apache.jackrabbit:jackrabbit-jcr-rmi:$jackrabbitVersion"
		compile "org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1"
	}
	bundlor {
		bundleSymbolicName = "org.springframework.extensions.jcr.jackrabbit"
		importTemplate += [
			'javax.*;version="0"',
			'javax.jcr.*;version="[2.0.0, 2.1.0)"',
			'org.springframework.core.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.beans.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.context.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.transaction.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.dao.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.web.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.util.*;version="[3.0.5, 4.0.0)"',
			'org.apache.jackrabbit.*;version="[2.4.0, 3.0.0)"',
			'org.springframework.extensions.jcr.*;version="[2.0.0, 2.1.0)"',
			'org.slf4j.*;version="[1.6.4, 1.7.0)"',
			'org.w3c.*;version="0"',
			'org.xml.sax.*;version="0"'
		]
	}
}

project('se-jcr-jackrabbit-ocm') {
	description = 'Springextension JCR -- jackrabbit-ocm'
	dependencies {
		compile project(":se-jcr-jackrabbit")
		compile "org.apache:jackrabbit-ocm:$jackrabbitOcmVersion"
		compile "org.slf4j:slf4j-api:$slf4jVersion"
	}
	bundlor {
		bundleSymbolicName = "org.springframework.extensions.jcr.jackrabbit.ocm"
		importTemplate += [
			'javax.*;version="0"',
			'javax.jcr.*;version="[2.0.0, 2.1.0)"',
			'org.springframework.core.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.beans.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.context.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.transaction.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.dao.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.web.*;version="[3.0.5, 4.0.0)"',
			'org.springframework.util.*;version="[3.0.5, 4.0.0)"',
			'org.apache.jackrabbit.*;version="[2.4.0, 3.0.0)"',
			'org.apache.jackrabbit.ocm.*;version="[1.5.3, 1.6.0)"',
			'org.springframework.extensions.jcr.*;version="[2.0.0, 2.1.0)"',
			'org.slf4j.*;version="[1.6.4, 1.7.0)"',
			'org.w3c.*;version="0"',
			'org.xml.sax.*;version="0"'
		]
	}
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '1.6'
}
